name: "[Init] Bepinex 5"

on:
  workflow_dispatch:
    inputs:
      language:
        description: 'F# | C#'
        default: 'F#'
        required: false
        type: string
      framework:
        description: 'The framework to assign to the new project.'
        default: 'netstandard2.1'
        required: false
        type: string
      commonUnityVersion:
        description: 'Unity Reference version.'
        default: '2022.3.10'
        required: false
        type: string
      gameSteamFolderName:
        description: 'The game name underneath your $(STEAMAPPS) dir.'
        default: 'Game'
        required: false
        type: string
      name:
        description: 'The name of the solution and project.'
        type: string

jobs:
  setup_files:
    name: Setup Core Files
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - uses: actions/setup-dotnet@v4
      - id: run
        run: |
          dotnet new solution --name '${{inputs.name}}'
          mkdir ${{inputs.name}}
          OptionalCompile='<Compile Include="../dotnet-common/FS/Utils.fs" />'
          echo "languageExtension=$([[ '${{ inputs.language }}' == 'F#' ]] && echo '.fs' || echo '.cs')" >> $GITHUB_OUTPUT

      - uses: 1arp/create-a-file-action@0.4.5
        with:
          path: '${{inputs.name}}/'
          file: '${{inputs.name}}${{steps.run.outputs.languageExtension}}proj'
          content: |
            <Project Sdk="Microsoft.NET.Sdk">
                <PropertyGroup>
                    <TargetFramework>${{inputs.framework}}</TargetFramework>
                    <RootNamespace>${{inputs.name}}</RootNamespace>
                    <GenerateDocumentationFile>true</GenerateDocumentationFile>
                    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

                    <BuildGameLibs>true</BuildGameLibs>
                    <BuildFromGameLibs>false</BuildFromGameLibs>

                    <GameManagedPath>$(STEAMAPPS)${{inputs.gameSteamFolderName}}/${{inputs.gameSteamFolderName}}_Data/Managed/</GameManagedPath>
                    <CommonUnityVersion>${{inputs.commonUnityVersion}}</CommonUnityVersion>
                
                    <PackageAuthor>${{vars.TCLI_USERNAME}}</PackageAuthor>
                    <PackageRepoUrl>https://github.com/${{github.repository}}</PackageRepoUrl>
                </PropertyGroup>
                <ItemGroup>
                    <PackageCommunities Include="community"/>
                    <PackageCommunityCategories Include="community"><Value>Mod</Value></PackageCommunityCategories>
                </ItemGroup>

                <ItemGroup Label="References">
                    <ShoddyReference Include="$(GameManagedPath)Assembly.dll"/>
                </ItemGroup>
                
                <ItemGroup Label="F# Compile Order" Condition="'${{steps.run.outputs.languageExtension}}' =='.fs'">
                    <Compile Include="../dotnet-common/FS/Utils.fs" />
                    <Compile Include="${{inputs.name}}Plugin${{steps.run.outputs.languageExtension}}" />
                </ItemGroup>

                <Import Project="../dotnet-common/MSBuild/BepInEx5.props" />
                <Import Project="../dotnet-common/MSBuild/Common.targets" />
                <Import Project="../dotnet-common/MSBuild/PluginInfoProps.FS.targets" />
                <Import Project="../dotnet-common/MSBuild/Packaging.TCLI.targets" />
                <Import Project="../dotnet-common/MSBuild/ShoddyGameLibs.lite.targets" />
            </Project>

      - uses: 1arp/create-a-file-action@0.4.5
        if: ${{steps.run.outputs.languageExtension == '.fs'}}
        with:
          path: '${{inputs.name}}/'
          file: '${{inputs.name}}Plugin.fs'
          content: |
            namespace ${{inputs.name}}

            open BepInEx
            open HarmonyLib
            open BepInEx.Logging
            open Utils.Operators

            module ${{inputs.name}} =
                let mutable internal Plugin: BaseUnityPlugin option = None
                let mutable internal Logger: ManualLogSource option = None
                let mutable internal Patcher: Harmony option = None
            open ${{inputs.name}}

            [<BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)>]
            type ${{inputs.name}}Plugin() =
                inherit BaseUnityPlugin()

                member this.Awake() =
                    Plugin <- Some this
                    Logger <- Some this.Logger
                    Patcher <- Harmony(this.Info.Metadata.GUID) |> Some

                    -optional {
                        let! patcher = Patcher
                        let! logger = Logger
                        patcher.PatchAll()
                        let patchedMethodCount = patcher.GetPatchedMethods() |> Array.ofSeq |> (_.Length)
                        let patchedMethodSuffix = if patchedMethodCount = 1 then "" else "s"
                        do 
                            $"{MyPluginInfo.PLUGIN_NAME} v{MyPluginInfo.PLUGIN_VERSION} loaded! Successfully patched {patchedMethodCount} method{patchedMethodSuffix}."
                            |> logger.LogInfo
                        return ()
                    }

      - uses: 1arp/create-a-file-action@0.4.5
        if: ${{steps.run.outputs.languageExtension == '.cs'}}
        with:
          path: '${{inputs.name}}/'
          file: '${{inputs.name}}Plugin.cs'
          content: |
            using BepInEx;
            using HarmonyLib;
            using BepInEx.Logging;
            using System.Linq;

            namespace ${{inputs.name}} {
                static class ${{inputs.name}} {
                    internal static BaseUnityPlugin Plugin;
                    internal static ManualLogSource Logger;
                    internal static Harmony Patcher;
                }
                [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)]
                class ${{inputs.name}}Plugin : BaseUnityPlugin {
                    void Awake() {
                        ${{inputs.name}}.Plugin = this;
                        ${{inputs.name}}.Logger = this.Logger;
                        ${{inputs.name}}.Patcher = new Harmony(this.Info.Metadata.GUID);

                        ${{inputs.name}}.Patcher.PatchAll();
                        var patchedMethodCount = ${{inputs.name}}.Patcher.GetPatchedMethods().Count();
                        var patchedMethodSuffix = patchedMethodCount == 1 ? "" : "s";

                        ${{inputs.name}}.Logger.LogInfo($"{MyPluginInfo.PLUGIN_NAME} v{MyPluginInfo.PLUGIN_VERSION} loaded! Successfully patched {patchedMethodCount} method{patchedMethodSuffix}.")
                    }
                }
            }

      - env:
          GH_TOKEN: ${{ github.token }}
          pr-branch: added/initial/bepinex5
        run: |
          dotnet sln add "./${{inputs.name}}/${{inputs.name}}${{steps.run.outputs.languageExtension}}proj"
          git checkout ${{env.pr-branch}} 2>/dev/null || git checkout -b ${{env.pr-branch}}
          git add .
          git commit -m "Added initial SLN & ${{steps.run.outputs.languageExtension}}proj"
          git push --set-upstream origin ${{env.pr-branch}}
          gh pr create --base ${{ github.event.repository.default_branch }} --head ${{env.pr-branch}} --title "Setup BepInEx5 ${{inputs.language}} Project" --body "" || echo "PR already exists or another error occurred"
          gh pr view --json url -t '{{.url}}' >> $GITHUB_STEP_SUMMARY